package esbam.canoa123.views.updateviews;

// CLASSES (ESBAM)
import esbam.canoa123.controll.BarcosController;
import esbam.canoa123.controll.CidadesController;
import esbam.canoa123.controll.PassageirosController;
import esbam.canoa123.controll.bussines.RestringeCampoText;
import esbam.canoa123.controll.bussines.ValideCampoText;
import esbam.canoa123.controll.bussines.FormataCamposMask;

// CLASSES (JAVA)
import java.awt.CardLayout;
import java.text.ParseException;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 * 
 * @author Jonny Nunes Viana
 */
public class TelaUpdate extends javax.swing.JFrame {
    private JTable table;
    private String cpfPassageiroAtual; 
    
    public TelaUpdate(){
        initComponents();
    }
    
    public TelaUpdate(JInternalFrame classTela, JTable table) {
        initComponents();
        telaSelecionada(classTela);
        executeComponente(table);
        formataCampos();
        preenchaCampos();
    }
    
    //**********************************************************************************************
    // INICIALIZADORES
    private void executeComponente(JTable table){
        this.table = table;
        this.setResizable(false);
    }
    
    private void formataCampos(){
        try {
            new FormataCamposMask().fieldCPF(txtCpfPassageiro);
        } catch (ParseException ex) {
            throw new RuntimeException("Erro ao formatar o campo de cpf do update");
        }
    }
    
    private void telaSelecionada(JInternalFrame classTela){
        CardLayout cl = (CardLayout) this.paneMain.getLayout();        
        try {
            if(classTela.getName().equalsIgnoreCase("inFrameBarco")){
                cl.show(this.paneMain, "updateBarco");
            }else if(classTela.getName().equalsIgnoreCase("inFrameCidade")) {
                cl.show(this.paneMain, "updateCidade");
            }else if(classTela.getName().equalsIgnoreCase("inFramePassageiro")){
                cl.show(this.paneMain, "updatePassageiro");
            }
        } catch (Exception ex) {
            throw new RuntimeException("Erro ao abrir o card do update");
        }
    }
    
    private void preenchaCampos(){
        int row = table.getSelectedRow();
        // DEPEDENDO DO PAINEL EM ABERTO PARA INICILIZAR OS CAMPOS
        if(paneBarco.isVisible()){
            txtIDBarco.setText(table.getModel().getValueAt(row, 0).toString());
            txtNomeBarco.setText(table.getModel().getValueAt(row, 1).toString());
            txtCapacidadeBarco.setText(table.getModel().getValueAt(row, 2).toString());
        }else if(paneCidade.isVisible()){
            txtIDCidade.setText(table.getModel().getValueAt(row, 0).toString());
            txtLocalidadeCidade.setText(table.getModel().getValueAt(row, 1).toString());
            txtEstadoCidade.setText(table.getModel().getValueAt(row, 2).toString());
        }else if(panePassageiro.isVisible()){
            txtIDPassageiro.setText(table.getModel().getValueAt(row, 0).toString());
            txtNomePassageiro.setText(table.getModel().getValueAt(row, 1).toString());
            txtCpfPassageiro.setText(table.getModel().getValueAt(row, 2).toString());
            txtSexoPassageiro.setText((table.getModel().getValueAt(row, 3).toString().equalsIgnoreCase("m")) ? jcbSexoPassageiro.getItemAt(0) : jcbSexoPassageiro.getItemAt(1));
            txtTelefonePassageiro.setText(table.getModel().getValueAt(row, 4).toString());
            cpfPassageiroAtual = txtCpfPassageiro.getText();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        paneMain = new javax.swing.JPanel();
        paneBarco = new javax.swing.JPanel();
        paneInputsBarco = new javax.swing.JPanel();
        lblID = new javax.swing.JLabel();
        lblNome = new javax.swing.JLabel();
        lblCapacidade = new javax.swing.JLabel();
        txtIDBarco = new javax.swing.JTextField();
        txtCapacidadeBarco = new javax.swing.JTextField();
        txtNomeBarco = new javax.swing.JTextField();
        paneCidade = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtIDCidade = new javax.swing.JTextField();
        txtEstadoCidade = new javax.swing.JTextField();
        txtLocalidadeCidade = new javax.swing.JTextField();
        panePassageiro = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtIDPassageiro = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtNomePassageiro = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtCpfPassageiro = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        txtSexoPassageiro = new javax.swing.JTextField();
        jcbSexoPassageiro = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        txtTelefonePassageiro = new javax.swing.JTextField();
        paneRodape = new javax.swing.JPanel();
        btnAtualiza = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Atualiza dados");

        paneMain.setLayout(new java.awt.CardLayout());

        paneBarco.setBackground(new java.awt.Color(101, 32, 91));
        paneBarco.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Atualize os dados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14), java.awt.SystemColor.textHighlightText)); // NOI18N

        paneInputsBarco.setBackground(new java.awt.Color(60, 14, 78));
        paneInputsBarco.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        paneInputsBarco.setToolTipText("");

        lblID.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblID.setForeground(java.awt.SystemColor.textHighlightText);
        lblID.setText("ID");

        lblNome.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblNome.setForeground(java.awt.SystemColor.textHighlightText);
        lblNome.setText("Nome");

        lblCapacidade.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblCapacidade.setForeground(java.awt.SystemColor.textHighlightText);
        lblCapacidade.setText("Capacidade");

        txtIDBarco.setEditable(false);
        txtIDBarco.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtIDBarco.setForeground(new java.awt.Color(0, 0, 0));
        txtIDBarco.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        txtCapacidadeBarco.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCapacidadeBarco.setForeground(new java.awt.Color(0, 0, 0));
        txtCapacidadeBarco.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        txtNomeBarco.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtNomeBarco.setForeground(new java.awt.Color(0, 0, 0));
        txtNomeBarco.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout paneInputsBarcoLayout = new javax.swing.GroupLayout(paneInputsBarco);
        paneInputsBarco.setLayout(paneInputsBarcoLayout);
        paneInputsBarcoLayout.setHorizontalGroup(
            paneInputsBarcoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneInputsBarcoLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(paneInputsBarcoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblNome, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                    .addComponent(lblID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneInputsBarcoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneInputsBarcoLayout.createSequentialGroup()
                        .addComponent(txtIDBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(lblCapacidade, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCapacidadeBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addGroup(paneInputsBarcoLayout.createSequentialGroup()
                        .addComponent(txtNomeBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        paneInputsBarcoLayout.setVerticalGroup(
            paneInputsBarcoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneInputsBarcoLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(paneInputsBarcoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCapacidade, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIDBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCapacidadeBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(paneInputsBarcoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNome, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomeBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout paneBarcoLayout = new javax.swing.GroupLayout(paneBarco);
        paneBarco.setLayout(paneBarcoLayout);
        paneBarcoLayout.setHorizontalGroup(
            paneBarcoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneInputsBarco, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        paneBarcoLayout.setVerticalGroup(
            paneBarcoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneBarcoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneInputsBarco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
        );

        paneMain.add(paneBarco, "updateBarco");

        paneCidade.setBackground(new java.awt.Color(101, 32, 91));
        paneCidade.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Atualize os dados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14), java.awt.SystemColor.textHighlightText)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(60, 14, 78));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setForeground(java.awt.SystemColor.textHighlightText);
        jLabel1.setText("ID");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setForeground(java.awt.SystemColor.textHighlightText);
        jLabel2.setText("Localidade");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setForeground(java.awt.SystemColor.textHighlightText);
        jLabel3.setText("Estado");

        txtIDCidade.setEditable(false);
        txtIDCidade.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtIDCidade.setForeground(new java.awt.Color(0, 0, 0));
        txtIDCidade.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        txtEstadoCidade.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtEstadoCidade.setForeground(new java.awt.Color(0, 0, 0));
        txtEstadoCidade.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtEstadoCidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEstadoCidadeKeyTyped(evt);
            }
        });

        txtLocalidadeCidade.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtLocalidadeCidade.setForeground(new java.awt.Color(0, 0, 0));
        txtLocalidadeCidade.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtLocalidadeCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtIDCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEstadoCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(151, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIDCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstadoCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLocalidadeCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout paneCidadeLayout = new javax.swing.GroupLayout(paneCidade);
        paneCidade.setLayout(paneCidadeLayout);
        paneCidadeLayout.setHorizontalGroup(
            paneCidadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        paneCidadeLayout.setVerticalGroup(
            paneCidadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneCidadeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(98, Short.MAX_VALUE))
        );

        paneMain.add(paneCidade, "updateCidade");

        panePassageiro.setBackground(new java.awt.Color(101, 32, 91));
        panePassageiro.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Atualize os dados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14), java.awt.SystemColor.textHighlightText)); // NOI18N
        panePassageiro.setVerifyInputWhenFocusTarget(false);

        jPanel2.setBackground(new java.awt.Color(60, 14, 78));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setForeground(java.awt.SystemColor.textHighlightText);
        jLabel4.setText("ID");

        txtIDPassageiro.setEditable(false);
        txtIDPassageiro.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtIDPassageiro.setForeground(new java.awt.Color(0, 0, 0));
        txtIDPassageiro.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtIDPassageiro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIDPassageiroKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setForeground(java.awt.SystemColor.textHighlightText);
        jLabel5.setText("Nome");

        txtNomePassageiro.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtNomePassageiro.setForeground(new java.awt.Color(0, 0, 0));
        txtNomePassageiro.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtNomePassageiro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNomePassageiroKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setForeground(java.awt.SystemColor.textHighlightText);
        jLabel6.setText("Cpf");

        txtCpfPassageiro.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtCpfPassageiro.setForeground(new java.awt.Color(0, 0, 0));
        txtCpfPassageiro.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel7.setForeground(java.awt.SystemColor.textHighlightText);
        jLabel7.setText("Sexo");

        txtSexoPassageiro.setEditable(false);
        txtSexoPassageiro.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtSexoPassageiro.setForeground(new java.awt.Color(0, 0, 0));
        txtSexoPassageiro.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jcbSexoPassageiro.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jcbSexoPassageiro.setForeground(new java.awt.Color(0, 0, 0));
        jcbSexoPassageiro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Masculino", "Feminino" }));
        jcbSexoPassageiro.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jcbSexoPassageiro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbSexoPassageiroItemStateChanged(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel8.setForeground(java.awt.SystemColor.textHighlightText);
        jLabel8.setText("Tell");

        txtTelefonePassageiro.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtTelefonePassageiro.setForeground(new java.awt.Color(0, 0, 0));
        txtTelefonePassageiro.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtTelefonePassageiro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonePassageiroKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNomePassageiro, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtCpfPassageiro, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTelefonePassageiro, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIDPassageiro, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(txtSexoPassageiro, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jcbSexoPassageiro, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIDPassageiro, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSexoPassageiro, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbSexoPassageiro))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNomePassageiro, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(txtCpfPassageiro)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(txtTelefonePassageiro, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout panePassageiroLayout = new javax.swing.GroupLayout(panePassageiro);
        panePassageiro.setLayout(panePassageiroLayout);
        panePassageiroLayout.setHorizontalGroup(
            panePassageiroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panePassageiroLayout.setVerticalGroup(
            panePassageiroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panePassageiroLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 94, Short.MAX_VALUE))
        );

        paneMain.add(panePassageiro, "updatePassageiro");

        paneRodape.setBackground(new java.awt.Color(50, 35, 150));

        btnAtualiza.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnAtualiza.setForeground(new java.awt.Color(255, 96, 83));
        btnAtualiza.setText("Atualizar");
        btnAtualiza.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        btnAtualiza.setBorderPainted(false);
        btnAtualiza.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAtualiza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneRodapeLayout = new javax.swing.GroupLayout(paneRodape);
        paneRodape.setLayout(paneRodapeLayout);
        paneRodapeLayout.setHorizontalGroup(
            paneRodapeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneRodapeLayout.createSequentialGroup()
                .addContainerGap(426, Short.MAX_VALUE)
                .addComponent(btnAtualiza, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        paneRodapeLayout.setVerticalGroup(
            paneRodapeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneRodapeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAtualiza)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(paneRodape, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(paneMain, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 40, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 300, Short.MAX_VALUE)
                    .addComponent(paneRodape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //**********************************************************************************************
    // EVENTOS
    private void btnAtualizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizaActionPerformed
        alterarDados();
    }//GEN-LAST:event_btnAtualizaActionPerformed

    private void txtEstadoCidadeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEstadoCidadeKeyTyped
       new ValideCampoText().validaCampoEstado(evt, txtEstadoCidade);
    }//GEN-LAST:event_txtEstadoCidadeKeyTyped

    private void jcbSexoPassageiroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbSexoPassageiroItemStateChanged
        txtSexoPassageiro.setText(jcbSexoPassageiro.getSelectedItem().toString());
    }//GEN-LAST:event_jcbSexoPassageiroItemStateChanged

    private void txtIDPassageiroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDPassageiroKeyTyped
        new ValideCampoText().validaCamposComNumero(evt);
    }//GEN-LAST:event_txtIDPassageiroKeyTyped

    private void txtNomePassageiroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomePassageiroKeyTyped
        new RestringeCampoText().restringirCampoDeNumeroEspecial(evt);
    }//GEN-LAST:event_txtNomePassageiroKeyTyped

    private void txtTelefonePassageiroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonePassageiroKeyTyped
        new ValideCampoText().validaCamposComNumero(evt);
        new ValideCampoText().validaCampoTelefone(evt, txtTelefonePassageiro);
    }//GEN-LAST:event_txtTelefonePassageiroKeyTyped

    //**********************************************************************************************
    // MÉTODOS
    private void alterarDados(){
        if(paneBarco.isVisible()){ // PAINEL DO BARCO
            painelBarco();
        }else if(paneCidade.isVisible()){ // PAINEL DA CIDADE
            painelCidade();
        }else if(panePassageiro.isVisible()){ // PAINEL DO PASSAGEIRO
            painelPassageiro();
        }
    }
    
    private void painelBarco(){
        try {
            boolean validado = false;
            String id = txtIDBarco.getText();
            String capacidade = txtCapacidadeBarco.getText();
            String nome = txtNomeBarco.getText();
            int option = JOptionPane.showConfirmDialog(this, "id: "+txtIDBarco.getText()+"\nNome: "+txtNomeBarco.getText()+"\nCapacidade: "+txtCapacidadeBarco.getText()+"\n\nDeseja continuar?", "Confirma", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(new BarcosController().verificaCampoNullBarco(nome, capacidade) || id.equals("")){
                JOptionPane.showMessageDialog(this, "Não pode haver campos vazios!");
                return;
            }            
            if(option == 0){
                validado = new BarcosController().altera(Integer.parseInt(id), nome, Integer.parseInt(capacidade));
                avisoAtualizado(validado);
            }
        } catch (Exception ex){
            ex.printStackTrace();
            throw new RuntimeException("Erro ao atualizar os dados do barco");
        }
    }
    
    private void painelCidade(){
        try {
            boolean validado = false;
            String id = txtIDCidade.getText();
            String localidade = txtLocalidadeCidade.getText();
            String estado = txtEstadoCidade.getText();
            int option = JOptionPane.showConfirmDialog(this, "id: "+id+"\nLocalidade: "+localidade+"\nEstado: "+estado+"\n\nDeseja continuar?", "Confirma", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(new CidadesController().verificaCamposNull(localidade, estado) || id.equals("")){
                JOptionPane.showMessageDialog(this, "Não pode haver campos vazios!");
                return;
            }
            if(option == 0){
                if(new CidadesController().buscaLocalidade(localidade) != null){
                    JOptionPane.showMessageDialog(this, "Nome de cidade já existe!", "Atenção", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                validado = new CidadesController().altera(Integer.parseInt(id), estado, localidade);
                avisoAtualizado(validado);
            } 
        } catch (Exception ex){
            ex.printStackTrace();
            throw new RuntimeException("Erro ao atualizar os dados da cidade");
        }
    }
   
    private void painelPassageiro(){
        try {
            boolean validado = false;
            String id = txtIDPassageiro.getText();
            String nome = txtNomePassageiro.getText();
            String cpf = txtCpfPassageiro.getText();
            String sexo = txtSexoPassageiro.getText();
            String tell = txtTelefonePassageiro.getText();
            int option = JOptionPane.showConfirmDialog(this, "id: "+id+"\nNome: "+nome+"\nCpf: "+cpf+"\nSexo: "+sexo+"\nTelefone: "+tell+"\n\nDeseja continuar?", "Confirma", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(new PassageirosController().verficarCamposNull(nome, cpf, tell, sexo)){
                JOptionPane.showMessageDialog(this, "Não pode haver campos vazios!");
                return;
            }
            if(option == 0){
                if(!cpfPassageiroAtual.equalsIgnoreCase(cpf)){
                    if(new PassageirosController().validarCpf(cpf)){
                        JOptionPane.showMessageDialog(this, "O cpf já existe!", "Atenção", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    cpfPassageiroAtual = cpf;
                }
                validado = new PassageirosController().altera(Integer.parseInt(id), nome, cpf, tell, sexo);
                avisoAtualizado(validado); 
            }
        } catch (Exception e) {
            throw new RuntimeException("Erro ao atualizar os dados do passageiro");
        }
    }
    
    //**********************************************************************************************
    // PRINCIPAL
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaUpdate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualiza;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> jcbSexoPassageiro;
    private javax.swing.JLabel lblCapacidade;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblNome;
    private javax.swing.JPanel paneBarco;
    private javax.swing.JPanel paneCidade;
    private javax.swing.JPanel paneInputsBarco;
    private javax.swing.JPanel paneMain;
    private javax.swing.JPanel panePassageiro;
    private javax.swing.JPanel paneRodape;
    private javax.swing.JTextField txtCapacidadeBarco;
    private javax.swing.JFormattedTextField txtCpfPassageiro;
    private javax.swing.JTextField txtEstadoCidade;
    private javax.swing.JTextField txtIDBarco;
    private javax.swing.JTextField txtIDCidade;
    private javax.swing.JTextField txtIDPassageiro;
    private javax.swing.JTextField txtLocalidadeCidade;
    private javax.swing.JTextField txtNomeBarco;
    private javax.swing.JTextField txtNomePassageiro;
    private javax.swing.JTextField txtSexoPassageiro;
    private javax.swing.JTextField txtTelefonePassageiro;
    // End of variables declaration//GEN-END:variables
    
    // MÉTODO COMUNS
    private void avisoAtualizado(boolean validado){
        if(validado){
            JOptionPane.showMessageDialog(this, "Atualizado com sucesso!", "Atualizado", JOptionPane.WARNING_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(this, "Não foi possivel atualizar!", "Atenção", JOptionPane.WARNING_MESSAGE);
        }
    }
}

    
