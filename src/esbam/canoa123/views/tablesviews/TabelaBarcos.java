package esbam.canoa123.views.tablesviews;

import esbam.canoa123.model.Barcos;
import esbam.canoa123.controll.bussines.ValideCampoText;
import esbam.canoa123.controll.bussines.RestringeCampoText;
import esbam.canoa123.controll.BarcosController;
import esbam.canoa123.views.updateviews.TelaUpdate;

import java.util.ArrayList;
import javax.swing.JOptionPane;

/*
    Correção:
    Havia um problema na execução do método isEmpty da array, o qual estaria recebendo null
    Porém, por se tratar de uma array e não um objeto isolado, isso estava dando erro de nullPointExeption
    Pois para uma array deve-se verificar os elementos se sua composição é vazio (não possue elementos) ou não

    Para um objeto isolado não problema de receber null. E a diferença entre array para um objeto isolado 
    em termos de comparação é:

        Objeto - vazio é igual a null
        Array - vazio é igual a []
*/

/**
 * Tela para consultar, alterar ou deletar os registros de barcos registrados no banco.
 * @author Jonny Nunes Viana
 */
public class TabelaBarcos extends javax.swing.JInternalFrame {
    
    // Atributos
    private javax.swing.table.DefaultTableModel table; 
    
    public TabelaBarcos() {
        initComponents();
        componentesInit();
        executeLista();
    }
    
    // ****************************************************
    // INICIALIZADORES
    
    private void componentesInit(){
        table = (javax.swing.table.DefaultTableModel) tblBarco.getModel();
    }
    
    private void executeLista(){
        addRowsTable(new BarcosController().listaBarcos());
    }

    public void resetaTabela(){
        excluirRows();
        executeLista();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneMain = new javax.swing.JPanel();
        btnDeletar = new javax.swing.JButton();
        btnPesquisar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnResetar = new javax.swing.JButton();
        paneScrollBarco = new javax.swing.JScrollPane();
        tblBarco = new javax.swing.JTable();
        paneInputsData = new javax.swing.JPanel();
        lblID = new javax.swing.JLabel();
        lblCapacidade = new javax.swing.JLabel();
        lblNome = new javax.swing.JLabel();
        txtCapacidade = new javax.swing.JTextField();
        txtID = new javax.swing.JTextField();
        txtNome = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Barcos");
        setName("inFrameBarco"); // NOI18N
        setPreferredSize(new java.awt.Dimension(453, 485));

        paneMain.setBackground(new java.awt.Color(60, 14, 78));

        btnDeletar.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnDeletar.setForeground(new java.awt.Color(255, 96, 83));
        btnDeletar.setText("Deletar");
        btnDeletar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        btnDeletar.setBorderPainted(false);
        btnDeletar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarActionPerformed(evt);
            }
        });

        btnPesquisar.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnPesquisar.setForeground(new java.awt.Color(255, 96, 83));
        btnPesquisar.setText("Pesquisar");
        btnPesquisar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        btnPesquisar.setBorderPainted(false);
        btnPesquisar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        btnEditar.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnEditar.setForeground(new java.awt.Color(255, 96, 83));
        btnEditar.setText("Editar");
        btnEditar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        btnEditar.setBorderPainted(false);
        btnEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnResetar.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnResetar.setForeground(new java.awt.Color(255, 96, 83));
        btnResetar.setText("Resetar");
        btnResetar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        btnResetar.setBorderPainted(false);
        btnResetar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnResetar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetarActionPerformed(evt);
            }
        });

        paneScrollBarco.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));

        tblBarco.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tblBarco.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tblBarco.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Capacidade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBarco.setToolTipText("Barcos registrados");
        paneScrollBarco.setViewportView(tblBarco);
        if (tblBarco.getColumnModel().getColumnCount() > 0) {
            tblBarco.getColumnModel().getColumn(0).setMinWidth(30);
            tblBarco.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        paneInputsData.setBackground(new java.awt.Color(60, 14, 64));
        paneInputsData.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblID.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblID.setForeground(java.awt.SystemColor.textHighlightText);
        lblID.setText("ID");

        lblCapacidade.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblCapacidade.setForeground(java.awt.SystemColor.textHighlightText);
        lblCapacidade.setText("Capacidade");

        lblNome.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblNome.setForeground(java.awt.SystemColor.textHighlightText);
        lblNome.setText("Nome");

        txtCapacidade.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtCapacidade.setForeground(new java.awt.Color(0, 0, 0));
        txtCapacidade.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtCapacidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCapacidadeKeyTyped(evt);
            }
        });

        txtID.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtID.setForeground(new java.awt.Color(0, 0, 0));
        txtID.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIDKeyTyped(evt);
            }
        });

        txtNome.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtNome.setForeground(new java.awt.Color(0, 0, 0));
        txtNome.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNomeKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout paneInputsDataLayout = new javax.swing.GroupLayout(paneInputsData);
        paneInputsData.setLayout(paneInputsDataLayout);
        paneInputsDataLayout.setHorizontalGroup(
            paneInputsDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneInputsDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneInputsDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneInputsDataLayout.createSequentialGroup()
                        .addComponent(lblID, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(paneInputsDataLayout.createSequentialGroup()
                        .addComponent(lblCapacidade)
                        .addGap(18, 18, 18)
                        .addComponent(txtCapacidade, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(paneInputsDataLayout.createSequentialGroup()
                        .addComponent(lblNome, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        paneInputsDataLayout.setVerticalGroup(
            paneInputsDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneInputsDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneInputsDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtID, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneInputsDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNome, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneInputsDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblCapacidade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCapacidade, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout paneMainLayout = new javax.swing.GroupLayout(paneMain);
        paneMain.setLayout(paneMainLayout);
        paneMainLayout.setHorizontalGroup(
            paneMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paneInputsData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paneScrollBarco, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, paneMainLayout.createSequentialGroup()
                        .addComponent(btnDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, paneMainLayout.createSequentialGroup()
                        .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnResetar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        paneMainLayout.setVerticalGroup(
            paneMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneScrollBarco, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(paneMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnResetar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paneInputsData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setBounds(0, 0, 535, 485);
    }// </editor-fold>//GEN-END:initComponents

    // ****************************************************
    
    // EVETOS DOS COMPONENTES
    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        consultas();
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void btnResetarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetarActionPerformed
        resetaTabela();
    }//GEN-LAST:event_btnResetarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        janelaEditar();
    }//GEN-LAST:event_btnEditarActionPerformed

    private void txtIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyTyped
        new ValideCampoText().validaCamposComNumero(evt);
    }//GEN-LAST:event_txtIDKeyTyped

    private void txtCapacidadeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCapacidadeKeyTyped
        new ValideCampoText().validaCamposComNumero(evt);
    }//GEN-LAST:event_txtCapacidadeKeyTyped

    private void txtNomeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeKeyTyped
        new RestringeCampoText().restringirCampoDeNumeroEspecial(evt);
    }//GEN-LAST:event_txtNomeKeyTyped

    private void btnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarActionPerformed
        if(tblBarco.getSelectedRow() != (-1)){
           int resposta = JOptionPane.showInternalConfirmDialog(null, "Deseja excluir\n\n"
                + "Id: " + tblBarco.getValueAt(tblBarco.getSelectedRow(), 0).toString() + "\n"
                + "Nome: " + tblBarco.getValueAt(tblBarco.getSelectedRow(), 1).toString() + "\n"
                + "Capacidade: "+tblBarco.getValueAt(tblBarco.getSelectedRow(), 2).toString() + "\n\n", "Deletando", JOptionPane.YES_NO_OPTION);
        
            if(resposta == 0){
                exluirBarco();
                excluirRows();
                executeLista();
            } 
        }else{
            JOptionPane.showMessageDialog(this, "Selecione uma linha!");
        }
    }//GEN-LAST:event_btnDeletarActionPerformed

    /**
     * 
     */
    // MÉTODOS
    private void consultas(){
        String id = txtID.getText();
        String capacidade = txtCapacidade.getText();
        String nome = txtNome.getText();
        if(new BarcosController().verificaAllCampoNull(nome, capacidade) && id.equals("")){ // TER PELO MENOS UM CAMPO NÃO VAZIO
            JOptionPane.showMessageDialog(null, "Preencha alguns campos");
            return;
        }
        excluirRows();
        try {
            if(!id.isEmpty()){
                addRowsTable(new BarcosController().busca(Integer.parseInt(id)));
            }else{
                addRowsTable(
                (!capacidade.isEmpty() && !nome.isEmpty()) ? new BarcosController().listaBarcosNomeCapacidade(nome, Integer.parseInt(capacidade)) : 
                (!capacidade.isEmpty()) ? new BarcosController().listaBarcosCapacidade(Integer.parseInt(capacidade)) : new BarcosController().listaBarcosNome(nome));
            }
        } catch (Exception e) {
            JOptionPane.showInternalMessageDialog(this, "dados não encontrado! verifique as entradas");
        }
    }
    
    /**
     * 
     */
    private void janelaEditar(){
        if(tblBarco.getSelectedRow() != -1){
            TelaUpdate TUP = new TelaUpdate(this, tblBarco);
            TUP.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(this, "Selecione uma linha!");
        }
    }
    
    /**
     * 
     */
    private void exluirBarco(){
        int id = Integer.parseInt(tblBarco.getValueAt(tblBarco.getSelectedRow(), 0).toString());
        if(new BarcosController().excluir(id)){
            JOptionPane.showMessageDialog(this, "Id " + tblBarco.getValueAt(tblBarco.getSelectedRow(), 0).toString() + " deletado!");
        }else{
            JOptionPane.showMessageDialog(this, "Id " + tblBarco.getValueAt(tblBarco.getSelectedRow(), 0).toString() + " não foi possível deletar!");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnResetar;
    private javax.swing.JLabel lblCapacidade;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblNome;
    private javax.swing.JPanel paneInputsData;
    private javax.swing.JPanel paneMain;
    private javax.swing.JScrollPane paneScrollBarco;
    private javax.swing.JTable tblBarco;
    private javax.swing.JTextField txtCapacidade;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables

    // MÉTODOS DE EXECUÇÃO COMUM (REPETITIVOS)
    
    /**
     * Função para excluir as linhas  na tabela (OBS: os dados não são excluidos).
     * Pode ser usado no botão resetar para inicializar os registros atualizados.
     * 
     */
    private void excluirRows(){
        while(table.getRowCount() != 0){
            table.removeRow(0);
        }
    }
    
    /**
     * Função de uma sobrecarga para executar a inserção dos dados á tabela.
     * @param barco Um objeto da classe Barcos com os dados com os dados para inserir.
     */
    private void addRowsTable(Barcos barco){
        table.addRow(new Object[]{
            barco.getId(),
            barco.getNome(),
            barco.getCapacidade()
        });
    }
    
    /**
     * Função de uma sobrecarga para executar a inserção dos dados á tabela.
     * @param barco Um objeto da classe de array genérica (Vector) com a classe Barcos com os dados para inserir.
     */
    private void addRowsTable(ArrayList<Barcos> barco){
        barco.forEach((v) -> {
                int i = table.getRowCount();
                table.addRow(new Object[] {
                barco.get(i).getId(),
                barco.get(i).getNome(),
                barco.get(i).getCapacidade()
            });
        });
    }
}
